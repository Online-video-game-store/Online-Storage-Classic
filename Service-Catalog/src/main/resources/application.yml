server:
  port: ${CATALOG_SERVICE_PORT:0}


spring:
  application:
    name: "CATALOG-SERVICE"

  output.ansi.enabled: ALWAYS

  # ограничение на размер MultipartFile файлов
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 12MB

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_ISSUER_URI:http://localhost:8090} # сервер аутентификации

  # SQL database
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/catalog_db
    username: admin
    password: admin
  # Spring Jpa Hibernate
  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        show_sql: false
        format_sql: true
        highlight_sql: true

    generate-ddl: true
    defer-datasource-initialization: true
    open-in-view: false
  # автозапуск скриптов 'schema.sql' и 'data.sql'
  sql:
    init:
      mode: never           # не нужен
  #      mode: always
  #      schema-locations: classpath:schema.sql


# настройки Эврики
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:7777/eureka}
    register-with-eureka: true                # Регистрация клиента в Eureka Server
    fetch-registry: true                      # Извлечение реестра из Eureka Server
    retry-on-connect-errors: true             # Повторные подключения к Eureka при сбоях
    registry-fetch-interval-seconds: 5        # (30)
  instance:
    prefer-ip-address: false                  # Использовать IP-адрес вместо имени хоста
    lease-renewal-interval-in-seconds: 5      # Интервал отправки heartbeats (30)
    lease-expiration-duration-in-seconds: 10  # Таймаут для истечения lease (сердцебиений) (60)

#logging:
#  level:
#    org.springframework.cloud.stream: DEBUG
#    org.springframework.amqp: DEBUG

# Настройка пути до изменяемых ресурсов, например картинок к товарам
app:
  images-path: ./datas/catalog/images
  images-url: /pk8000/api/catalog/images
  images-temp: ./datas/temp/images

# Actuator. По дефолту доступны только health и info.
management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus, env, loggers, micrometer
    access:
      default: none                   # по дефолту не указанные эндпоинты отключены
  endpoint:
    health:
      access: unrestricted            # разрешаем все методы HTTP (get, post, delete и тд)
      show-details: when-authorized
    prometheus:
      access: unrestricted
    info:
      access: read_only
    metrics:
      access: read_only
    loggers:
      access: unrestricted
    env:
      access: unrestricted


  # разрешаем отображение информации из info-секции файла настроек
  info:
    env:
      enabled: true
    java:
      enabled: true    # это выведет в info информацию по JVM

info:
  app:
    name: "Магазин игрушек для ПК8000 'Сура'"
    description: "Микросервис 'Каталог продукции'"
    version: "2.1"
  developer:
    name: "Хлус А. А."
    years: "49"

